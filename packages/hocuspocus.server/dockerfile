# Build Stage
FROM oven/bun:1.2.18-alpine AS builder

# Install system dependencies needed for native modules
RUN apk add --no-cache python3 make g++ git curl

WORKDIR /app

# Copy dependency files first for better layer caching
COPY package.json bun.lockb* ./
COPY tsconfig.json bunfig.toml ./
COPY prisma ./prisma/

# Install dependencies and generate Prisma client
# Skip optional dependencies (utf-8-validate, bufferutil) to speed up build
RUN bun install --frozen-lockfile --production --no-optional && \
    bunx prisma generate && \
    bun pm cache rm

# Runtime Stage
FROM oven/bun:1.2.18-alpine

ARG ENVIRONMENT=stage
ENV ENVIRONMENT=$ENVIRONMENT
ENV NODE_ENV=production

# Install runtime dependencies
RUN apk add --no-cache dumb-init curl

WORKDIR /app

# Copy built dependencies from builder stage
COPY --from=builder --chown=bun:bun /app/node_modules ./node_modules
COPY --from=builder --chown=bun:bun /app/prisma ./prisma

# Copy application source code (src/ directory)
COPY --chown=bun:bun src ./src
COPY --chown=bun:bun package.json tsconfig.json bunfig.toml ./

# Copy production scripts
COPY --chown=bun:bun scripts ./scripts

# Make scripts executable
RUN chmod +x scripts/start-production.ts scripts/fix-migration.ts scripts/docker-entrypoint.sh

# Create logs directory for PM2
RUN mkdir -p logs && chown -R bun:bun logs

# Switch to bun user
USER bun

# Expose ports (REST API: 3001, WebSocket: 3002)
EXPOSE 3001 3002

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3001/health || exit 1

# Use dumb-init for proper signal handling and run entrypoint script
ENTRYPOINT ["dumb-init", "--"]

# Run the entrypoint script that determines which PM2 processes to run based on ENVIRONMENT
CMD ["sh", "scripts/docker-entrypoint.sh"]
