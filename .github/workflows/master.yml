# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Master.js CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  analyze:
    name: codeql-analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["javascript"]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.
          # queries: ./path/to/local/query, your-org/your-repo/queries@main

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      # - name: Autobuild
      #   uses: github/codeql-action/autobuild@v1

      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 https://git.io/JvXDl

      # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
      #    and modify them (or add more) to build your code if your project
      #    uses a compiled language

      #- run: |
      #   make bootstrap
      #   make release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  backend-tests-withoutpluginsLinux:
    # run on pushes to any branch
    # run on PRs from external forks
    if: |
      (github.event_name != 'pull_request')
      || (github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id)
    name: Linux without plugins
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node: [12, 14, 16]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - name: Install libreoffice
        run: |
          sudo add-apt-repository -y ppa:libreoffice/ppa
          sudo apt update
          sudo apt install -y --no-install-recommends libreoffice libreoffice-pdfimport
      - name: Install all dependencies and symlink for ep_etherpad-lite
        run: src/bin/installDeps.sh

      - name: Run the backend tests
        run: cd src && npm test
  backend-tests-withoutpluginsWindows:
    # run on pushes to any branch
    # run on PRs from external forks
    if: |
      (github.event_name != 'pull_request')
      || (github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id)
    name: Windows without plugins
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: Install all dependencies and symlink for ep_etherpad-lite
        run: |
          cd src
          npm ci --no-optional
      - name: Fix up the settings.json
        run: |
          powershell -Command "(gc settings.json.template) -replace '\"max\": 10', '\"max\": 10000' | Out-File -encoding ASCII settings.json.holder"
          powershell -Command "(gc settings.json.holder) -replace '\"points\": 10', '\"points\": 1000' | Out-File -encoding ASCII settings.json"
      - name: Run the backend tests
        run: cd src && npm test

  build:
    name: build docs.plus
    needs: [analyze, backend-tests-withoutpluginsLinux, backend-tests-withoutpluginsWindows]
    runs-on: docs.plus
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Etherpad plugins
        run: >
          npm install --no-save --legacy-peer-deps
          ep_adminpads2
          https://github.com/samirsayyad/ep_rocketchat#f214f48
          https://github.com/ether/ep_comments_page
          https://github.com/ether/ep_cursortrace
          https://github.com/samirsayyad/ep_custom_header_message
          https://github.com/samirsayyad/ep_docs_plus_customize#c68bc28
          https://github.com/samirsayyad/ep_full_hyperlinks#1eb4ecd
          ep_hide_line_numbers
          https://github.com/samirsayyad/ep_insert_media#eecbc98
          https://github.com/samirsayyad/ep_loading_pad#9ae42cd
          ep_monetization
          https://github.com/samirsayyad/ep_profile_modal#10a1e17
          ep_remove_embed
          https://github.com/samirsayyad/ep_headings2#76e3f79
          https://github.com/samirsayyad/ep_set_title_on_pad#e507359
          https://github.com/samirsayyad/ep_table_of_contents#b123e05
          https://github.com/HMarzban/ep_headerview#efe5bd1 
          # https://github.com/HMarzban/ep_wrtc_heading#ffb7911
          # https://github.com/ether/ep_sticky_attributes.git

      - name: Install all dependencies and symlink for ep_etherpad-lite
        run: src/bin/installDeps.sh

      - name: Run pm2 docsplus instance
        run: DB_NAME=handbook pm2 start temp/ecosystem.config.js --only  ${GITHUB_REF#refs/heads/}

      - name: Run pm2 ws.router instance
        run: DB_NAME=handbook pm2 reload temp/pm2.start.config.js --only ws_${GITHUB_REF#refs/heads/}

    env:
      DB_USER: ${{secrets.PG_USER}}
      DB_PASS: ${{secrets.PG_PASS}}
      DB_HOST: ${{secrets.PG_HOST}}
      DB_TYPE: postgres
      DB_PORT: ${{secrets.PG_PORT}}
      MEDIA_BUCKET_NAME: ${{secrets.MEDIA_BUCKET_NAME}}
      BUCKET_S3_SERVER: ${{secrets.BUCKET_S3_SERVER}}
      ACCESS_KEY_SECRET: ${{secrets.ACCESS_KEY_SECRET}}
      ACCESS_KEY_ID: ${{secrets.ACCESS_KEY_ID}}
      ROCKET_CHAT_ADMIN_USERID: ${{secrets.ROCKET_CHAT_ADMIN_USERID}}
      ROCKET_CHAT_ADMIN_TOKEN: ${{secrets.ROCKET_CHAT_ADMIN_TOKEN}}
